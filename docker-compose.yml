services:
  postgres_ingestion_db:
    image: pgvector/pgvector:pg16
    volumes:
      - postgres_ingestion_data:/var/lib/postgresql/data/
    env_file:
      - ./ingestion_service/.env
    ports:
      - "5432:5432"

  postgres_rag_db:
    image: pgvector/pgvector:pg16
    volumes:
      - postgres_rag_data:/var/lib/postgresql/data/
    env_file:
      - ./dataengineering_service/.env
    ports:
      - "15433:5432"

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"

  ingestion_service:
    build:
      context: ./ingestion_service
    command: python manage.py runserver 0.0.0.0:8000
#    command: tail -f /dev/null
    volumes:
      - ./ingestion_service:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres_ingestion_db
      - redis
    env_file:
      - ./ingestion_service/.env

  ingestion_worker:
    build:
      context: ./ingestion_service
    command: celery -A bookroad worker -l info
    volumes:
      - ./ingestion_service:/app
    depends_on:
      - ingestion_service
      - redis # worker도 redis에 직접 의존하므로 추가하는 것이 좋습니다.
    env_file:
      - ./ingestion_service/.env

  dataengineering_service:
    build:
      context: ./dataengineering_service

    command: python run_etl.py
    volumes:
      - ./dataengineering_service:/app
    depends_on:
      - postgres_ingestion_db
      - postgres_rag_db
    env_file:
      - ./dataengineering_service/.env

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1 # 1개의 GPU를 할당 (또는 'all')
              capabilities: [ gpu ]

volumes:
  postgres_ingestion_data:
  postgres_rag_data:
